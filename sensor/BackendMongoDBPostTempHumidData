exports = async function(payload, response) {
  // Convert the webhook body from BSON to an EJSON object

  const body = EJSON.parse(payload.body.text());

  // Execute application logic, such as working with MongoDB
  if(body) {
    const mdb = context.services.get('mongodb-atlas');
    const sensordata = mdb.db("iotdb").collection("sensordata");
    
    // const requests = mdb.db("iotdb").collection("sensordata");
    
    const { insertedId } = await sensordata.updateOne(
      {
        "device": body.device,
      },
      {
        $push: 
          {
            measurements:
            {
              "temperature": Number(body.temperature),
              "humidity": Number(body.humidity),
              "sensortime": body.sensortime,
              "cloudtime" : Date()
            }
          }
            
      },
      {
        upsert: true
      }
    );

    // Respond with an affirmative result
    
    response.setStatusCode(200);

    response.setBody(`Successfully saved sensordata with _id: ${insertedId}.`);
  } else {

    // Respond with a malformed request error

    response.setStatusCode(400);

    response.setBody(`Could not find sensordata in the webhook request body.`);
  }
  // This return value does nothing because we already modified the response object.
  // If you do not modify the response object and you enable *Respond with Result*,
  // Stitch will include this return value as the response body.
  return { msg: "finished!" };
}